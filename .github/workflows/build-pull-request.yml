name: Build pull request

on:
    workflow_dispatch:
    pull_request:
        branches:
            - master

env:
    CONAN_REVISIONS_ENABLED: 1
    CONAN_SCM_TO_CONANDATA: 1
    CONAN_SYSREQUIRES_MODE: enabled
    PROFILE_CONAN: conan-debug
    CI: 1 #This will turn off a couple of warnings in the build
    CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    COVERAGE_THRESHOLD: 70

jobs:
    build:
        name: Build on *NIX and Windows
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ ubuntu-22.04, ubuntu-24.04, macos-14, windows-2022 ]

        steps:
            -   uses: actions/checkout@v4.2.2

            -   name: Workaround preset name difference
                if: runner.os == 'Windows'
                shell: bash
                run: echo "PROFILE_CONAN=conan-default" >> $GITHUB_ENV

            -   name: Use coverage preset
                if: runner.os == 'Linux'
                shell: bash
                run: echo "PROFILE_CONAN=coverage" >> $GITHUB_ENV

            -   name: Use ccache
                uses: hendrikmuhs/ccache-action@v1.2
                with:
                    key: ${{ github.job }}-${{ matrix.os }}

            -   name: Setup environment
                shell: bash
                run: |
                    export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"

            -   name: Install cppunit (Linux)
                if: runner.os == 'Linux'
                run: sudo apt-get update && sudo apt-get install -y libcppunit-dev

            -   name: Install Mac tools
                shell: bash
                if: runner.os == 'macOS'
                run: |
                    brew install autoconf automake cppunit

            -   name: Install Windows tools
                if: runner.os == 'Windows'
                uses: "GuillaumeFalourd/setup-rsync@v1.2"

            -   name: Install cppunit (Windows)
                if: runner.os == 'Windows'
                run: choco install -y cppunit

            -   uses: actions/setup-python@v5
                with:
                    python-version: '3.10'
                    cache: 'pip'

            -   name: Install Conan
                shell: bash
                run: |
                    pip install -r .github/workflows/requirements.txt
                    conan profile detect
                    #Set the default profile to use g++ 17 it it's not detected
                    sed -i.backup 's/compiler.cppstd=14/compiler.cppstd=17/g' ~/.conan2/profiles/default
                    conan remote add worldforge https://artifactory.ogenvik.org/artifactory/api/conan/conan-local

            -   name: Verify Python packages
                shell: bash
                run: python -m pytest --version

            -   name: Have Conan install packages
                shell: bash
                run: |
                    export PATH=~/.local/bin:$PATH
                    conan install . -pr default --build=missing -c tools.system.package_manager:mode=install -c tools.system.package_manager:sudo=True --lockfile-partial
                    if [[ x"$CONAN_PASSWORD" != "x" && x"$CONAN_LOGIN_USERNAME" != "x" ]]; then
                      conan remote login worldforge $CONAN_LOGIN_USERNAME -p $CONAN_PASSWORD
                      conan upload "*" -r worldforge -c
                    fi

            -   name: Configure CMake
                shell: bash
                #The -DCMAKE_C_FLAGS="-s" will strip all executables, which we want because we want to provide a Snap package
                run: cmake --preset $PROFILE_CONAN . -DBUILD_TESTING=ON -DCMAKE_INSTALL_PREFIX=~/install/usr -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_FLAGS="-s" -DATLAS_GENERATE_OBJECTS=OFF -DATLAS_DISABLE_BENCHMARKS=ON

            -   name: Build
                shell: bash
                run: cmake --build --preset $PROFILE_CONAN --parallel 4

            -   name: Test
                shell: bash
                run: CTEST_OUTPUT_ON_FAILURE=1 cmake --build --preset $PROFILE_CONAN --target check

            -   name: End-to-end client session
                shell: bash
                run: |
                    python apps/tests/e2e/minimal_session.py

            -   name: Generate coverage report
                if: runner.os == 'Linux'
                shell: bash
                run: |
                    lcov --directory . --capture --output-file coverage.info
                    lcov --remove coverage.info '/usr/*' --output-file coverage.info
                    genhtml coverage.info --output-directory coverage-report

            -   name: Check coverage threshold
                if: runner.os == 'Linux'
                shell: bash
                run: |
                    coverage=$(lcov --summary coverage.info | grep -Po 'lines\.*: \K[0-9.]+(?=%)')
                    export coverage
                    python - <<'PY'
import os, sys
cov=float(os.environ['coverage'])
thr=float(os.environ['COVERAGE_THRESHOLD'])
print(f"Total coverage: {cov}%")
if cov < thr:
    print(f"Coverage {cov}% is below threshold {thr}%")
    sys.exit(1)
else:
    print(f"Coverage {cov}% meets threshold {thr}%")
PY

            -   name: Upload coverage artifact
                if: runner.os == 'Linux' && always()
                uses: actions/upload-artifact@v4.6.1
                with:
                    name: coverage-report
                    path: coverage-report

            -   name: Upload coverage to Codecov
                if: runner.os == 'Linux' && env.CODECOV_TOKEN != '' && always()
                uses: codecov/codecov-action@v4
                with:
                    files: coverage.info
                    token: ${{ env.CODECOV_TOKEN }}
