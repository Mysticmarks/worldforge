name: Build all

on:
    workflow_dispatch:
    push:
        branches:
            - master

env:
    CONAN_REVISIONS_ENABLED: 1
    CONAN_SCM_TO_CONANDATA: 1
    CONAN_SYSREQUIRES_MODE: enabled
    CONAN_PASSWORD: ${{ secrets.CONAN_PASSWORD }}
    CONAN_LOGIN_USERNAME: ${{ secrets.CONAN_LOGIN_USERNAME }}
    RSYNC_PASSWORD: ${{ secrets.RSYNC_PASSWORD }}
    PROFILE_CONAN: conan-release
    SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_TOKEN }}
    CI: 1 #This will turn off a couple of warnings in the build

jobs:
    build-test:
        name: Build and test on *NIX and Windows
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ ubuntu-22.04, ubuntu-24.04, macos-14, windows-2022 ]

        steps:
            -   uses: actions/checkout@v4.2.2
                with:
                  fetch-depth: 0 #We need all history to get proper Git versioning for dev builds.


            -   name: Workaround preset name difference
                if: runner.os == 'Windows'
                shell: bash
                run: echo "PROFILE_CONAN=conan-default" >> $GITHUB_ENV

            -   name: Cache media
                uses: actions/cache@v4.2.1
                with:
                    path: |
                        ~/install/usr/share/cyphesis/assets
                    key: worldforge-media

            -   name: Use ccache
                uses: hendrikmuhs/ccache-action@v1.2
                with:
                    key: ${{ github.job }}-${{ matrix.os }}

            -   name: "Install packages"
                uses: awalsh128/cache-apt-pkgs-action@v1.4.3
                if: runner.os == 'Linux'
                with:
                    #Needed for the assets processing step in Cyphesis
                    packages: imagemagick file rsync libfuse2 libcppunit-dev
                    version: 1.0

            -   name: Setup environment
                shell: bash
                run: |
                    if [[ "$ImageOS" == "ubuntu22" ]]; then
                      echo "BUILD_SNAP=true" >> $GITHUB_ENV
                    fi
                    if [[ "$ImageOS" == "ubuntu22" ]]; then
                      echo "BUILD_APPIMAGE=true" >> $GITHUB_ENV
                    fi
                    if [[ "$ImageOS" == "win22" ]]; then
                      echo "BUILD_EMBER_NSIS=true" >> $GITHUB_ENV
                    fi
                    export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"

            -   name: Install Mac tools
                shell: bash
                if: runner.os == 'macOS'
                run: |
                    brew install autoconf automake cppunit

            -   name: Install Windows tools
                if: runner.os == 'Windows'
                uses: "GuillaumeFalourd/setup-rsync@v1.2"

            -   name: Install cppunit (Windows)
                if: runner.os == 'Windows'
                run: choco install -y cppunit

            -   name: Install LXD (for Snapcraft)
                if: env.BUILD_SNAP == 'true'
                uses: canonical/setup-lxd@v0.1.2

            -   name: Install Snapcraft
                if: env.BUILD_SNAP == 'true'
                uses: samuelmeuli/action-snapcraft@v2

            -   uses: actions/setup-python@v5
                with:
                    python-version: '3.10'
                    cache: 'pip'

            -   name: Install Conan
                shell: bash
                run: |
                    pip install -r .github/workflows/requirements.txt
                    conan profile detect
                    #Set the default profile to use g++ 17 it it's not detected
                    sed -i.backup 's/compiler.cppstd=14/compiler.cppstd=17/g' ~/.conan2/profiles/default
                    conan remote add worldforge https://artifactory.ogenvik.org/artifactory/api/conan/conan-local

            -   name: Have Conan install packages
                shell: bash
                run: |
                    export PATH=~/.local/bin:$PATH
                    #We've gotten problems with building the Python package because it tries to access /etc/ssl/openssl.cnf on the host machine, which might be in a different format than expected.
                    #Avoid this by setting OPENSSL_CONF
                    export OPENSSL_CONF=/dev/null
                    conan install . -pr default --build=missing -c tools.system.package_manager:mode=install -c tools.system.package_manager:sudo=True --lockfile-partial
                    if [[ x"$CONAN_PASSWORD" != "x" && x"$CONAN_LOGIN_USERNAME" != "x" ]]; then
                      conan remote login worldforge $CONAN_LOGIN_USERNAME -p $CONAN_PASSWORD
                      conan upload "*" -r worldforge -c
                    fi

            -   name: Configure CMake
                shell: bash
                #The -DCMAKE_C_FLAGS="-s" will strip all executables, which we want because we want to provide a Snap package
                run: cmake --preset $PROFILE_CONAN . -DBUILD_TESTING=ON -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/prebuilt -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_FLAGS="-s" -DATLAS_GENERATE_OBJECTS=OFF -DATLAS_DISABLE_BENCHMARKS=ON

            -   name: Build
                shell: bash
                run: cmake --build --preset conan-release --parallel 4

            -   name: Test
                shell: bash
                run: CTEST_OUTPUT_ON_FAILURE=1 cmake --build --preset conan-release --target check

            -   name: Verify prebuilt binaries
                shell: bash
                run: |
                    set -e
                    if [ -z "$(find "${{ github.workspace }}/prebuilt" -type f)" ]; then
                        echo "prebuilt directory is empty"
                        exit 1
                    fi
                    ls -R "${{ github.workspace }}/prebuilt"
                    for bin in cyphesis ember; do
                        if [ ! -x "${{ github.workspace }}/prebuilt/bin/$bin" ]; then
                            echo "Missing required binary: $bin"
                            exit 1
                        fi
                    done

            -   name: Generate checksum manifest
                shell: bash
                run: |
                    find "${{ github.workspace }}/prebuilt" -type f -exec sha256sum {} + | sort | tee "${{ github.workspace }}/prebuilt/manifest.sha256"

            -   name: Create prebuilt archive
                if: github.ref == 'refs/heads/master'
                shell: bash
                run: |
                    tar -czf "${{ github.workspace }}/prebuilt.tar.gz" -C "${{ github.workspace }}/prebuilt" .

            -   name: Log prebuilt artifact details
                shell: bash
                run: |
                    echo "Checksum manifest:" && cat "${{ github.workspace }}/prebuilt/manifest.sha256"
                    if [ -f "${{ github.workspace }}/prebuilt.tar.gz" ]; then
                        echo "prebuilt.tar.gz size (bytes): $(wc -c < "${{ github.workspace }}/prebuilt.tar.gz")"
                        echo "prebuilt.tar.gz sha256:" && sha256sum "${{ github.workspace }}/prebuilt.tar.gz"
                    fi

            -   name: Upload prebuilt
                uses: actions/upload-artifact@v4.6.1
                with:
                    name: prebuilt
                    path: ${{ github.workspace }}/prebuilt
                    retention-days: 30

            -   name: Upload manifest
                uses: actions/upload-artifact@v4.6.1
                with:
                    name: prebuilt-manifest
                    path: ${{ github.workspace }}/prebuilt/manifest.sha256
                    retention-days: 30

            -   name: Publish prebuilt release
                if: github.ref == 'refs/heads/master' && success()
                uses: softprops/action-gh-release@v2
                with:
                    tag_name: prebuilt-${{ github.run_number }}
                    name: Prebuilt ${{ github.run_number }}
                    files: |
                        ${{ github.workspace }}/prebuilt.tar.gz
                        ${{ github.workspace }}/prebuilt/manifest.sha256

    package:
        name: Package on *NIX and Windows
        needs: build-test
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ ubuntu-22.04, ubuntu-24.04, windows-2022 ]

        steps:
            -   uses: actions/checkout@v4.2.2
                with:
                  fetch-depth: 0 #We need all history to get proper Git versioning for dev builds.

            -   name: Workaround preset name difference
                if: runner.os == 'Windows'
                shell: bash
                run: echo "PROFILE_CONAN=conan-default" >> $GITHUB_ENV

            -   name: Cache media
                uses: actions/cache@v4.2.1
                with:
                    path: |
                        ~/install/usr/share/cyphesis/assets
                    key: worldforge-media

            -   name: Use ccache
                uses: hendrikmuhs/ccache-action@v1.2
                with:
                    key: ${{ github.job }}-${{ matrix.os }}

            -   name: "Install packages"
                uses: awalsh128/cache-apt-pkgs-action@v1.4.3
                if: runner.os == 'Linux'
                with:
                    #Needed for the assets processing step in Cyphesis
                    packages: imagemagick file rsync libfuse2 libcppunit-dev
                    version: 1.0

            -   name: Setup environment
                shell: bash
                run: |
                    if [[ "$ImageOS" == "ubuntu22" ]]; then
                      echo "BUILD_SNAP=true" >> $GITHUB_ENV
                    fi
                    if [[ "$ImageOS" == "ubuntu22" ]]; then
                      echo "BUILD_APPIMAGE=true" >> $GITHUB_ENV
                    fi
                    if [[ "$ImageOS" == "win22" ]]; then
                      echo "BUILD_EMBER_NSIS=true" >> $GITHUB_ENV
                    fi
                    export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"

            -   name: Install Mac tools
                shell: bash
                if: runner.os == 'macOS'
                run: |
                    brew install autoconf automake cppunit

            -   name: Install Windows tools
                if: runner.os == 'Windows'
                uses: "GuillaumeFalourd/setup-rsync@v1.2"

            -   name: Install cppunit (Windows)
                if: runner.os == 'Windows'
                run: choco install -y cppunit

            -   name: Install LXD (for Snapcraft)
                if: env.BUILD_SNAP == 'true'
                uses: canonical/setup-lxd@v0.1.2

            -   name: Install Snapcraft
                if: env.BUILD_SNAP == 'true'
                uses: samuelmeuli/action-snapcraft@v2

            -   uses: actions/setup-python@v5
                with:
                    python-version: '3.10'
                    cache: 'pip'

            -   name: Install Conan
                shell: bash
                run: |
                    pip install -r .github/workflows/requirements.txt
                    conan profile detect
                    #Set the default profile to use g++ 17 it it's not detected
                    sed -i.backup 's/compiler.cppstd=14/compiler.cppstd=17/g' ~/.conan2/profiles/default
                    conan remote add worldforge https://artifactory.ogenvik.org/artifactory/api/conan/conan-local

            -   name: Have Conan install packages
                shell: bash
                run: |
                    export PATH=~/.local/bin:$PATH
                    #We've gotten problems with building the Python package because it tries to access /etc/ssl/openssl.cnf on the host machine, which might be in a different format than expected.
                    #Avoid this by setting OPENSSL_CONF
                    export OPENSSL_CONF=/dev/null
                    conan install . -pr default --build=missing -c tools.system.package_manager:mode=install -c tools.system.package_manager:sudo=True --lockfile-partial
                    if [[ x"$CONAN_PASSWORD" != "x" && x"$CONAN_LOGIN_USERNAME" != "x" ]]; then
                      conan remote login worldforge $CONAN_LOGIN_USERNAME -p $CONAN_PASSWORD
                      conan upload "*" -r worldforge -c
                    fi

            -   name: Configure CMake
                shell: bash
                #The -DCMAKE_C_FLAGS="-s" will strip all executables, which we want because we want to provide a Snap package
                run: cmake --preset $PROFILE_CONAN . -DBUILD_TESTING=ON -DCMAKE_INSTALL_PREFIX=~/install/usr -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_FLAGS="-s" -DATLAS_GENERATE_OBJECTS=OFF -DATLAS_DISABLE_BENCHMARKS=ON

            -   name: Build
                shell: bash
                run: cmake --build --preset conan-release --parallel 4

            -   name: Build AppImage
                if: env.BUILD_APPIMAGE == 'true'
                run: |
                    echo "Installing Ember only first"
                    cmake --install build/Release/apps/ember
                    echo "Building AppImage"
                    ln -s ~/install/usr/share/icons/hicolor/64x64/apps/ember.png ~/install/
                    ln -s ~/install/usr/share/applications/org.worldforge.ember.desktop ~/install/
                    ln -s ~/install/usr/share/icons/hicolor/64x64/apps/ember.png ~/install/.DirIcon
                    curl -L https://github.com/AppImage/AppImageKit/releases/download/13/AppRun-x86_64 > ~/install/AppRun
                    chmod a+x ~/install/AppRun
                    curl -L https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-x86_64.AppImage > appimagetool-x86_64.AppImage
                    chmod a+x appimagetool-x86_64.AppImage
                    ./appimagetool-x86_64.AppImage -n ~/install

            -   name: Install all
                shell: bash
                run: cmake --build --preset conan-release --target install

            -   name: Setup LXD
                if: env.BUILD_SNAP == 'true'
                shell: bash
                run: lxd init --auto

            -   name: Build Ember Snap
                if: env.BUILD_SNAP == 'true'
                shell: bash
                run: |
                    echo "Building Snap"
                    cmake --build --preset conan-release  --parallel 4 --target snap-build-ember

            -   name: Build NSIS
                if: env.BUILD_EMBER_NSIS == 'true'
                shell: cmd
                run: makensis ${{github.workspace}}/build/apps/ember/Ember.nsi

            -   name: Downloading Cyphesis media
                if: env.BUILD_SNAP == 'true'
                shell: bash
                run: |
                    echo "Getting media"
                    cmake --build --preset conan-release  --parallel 4 --target media-download-rsync

            -   name: Build Cyphesis Snap
                if: env.BUILD_SNAP == 'true'
                shell: bash
                run: |
                    echo "Building Snap"
                    cmake --build --preset conan-release  --parallel 4 --target snap-build-cyphesis

            -   name: Verify packaged binaries
                if: ${{ success() }}
                shell: bash
                run: |
                    set -e
                    if ls "$HOME"/install/usr/bin/* >/dev/null 2>&1; then
                        for bin in "$HOME"/install/usr/bin/*; do
                            echo "Checking $bin"
                            "$bin" --version >/dev/null 2>&1 || "$bin" -v >/dev/null 2>&1 || "$bin" version >/dev/null 2>&1 || { echo "$bin failed to report version"; exit 1; }
                        done
                    else
                        echo "No executables found in $HOME/install/usr/bin"
                        exit 1
                    fi

            -   name: Upload Snaps to Snapstore
                if: env.BUILD_SNAP == 'true'
                shell: bash
                run: |
                    echo "Uploading Snap"
                    snapcraft upload ~/install/usr/ember*.snap --release edge
                    snapcraft upload ~/install/usr/cyphesis*.snap --release edge

            -   name: Store Snaps
                if: env.BUILD_SNAP == 'true'
                uses: actions/upload-artifact@v4.6.1
                with:
                    compression-level: 0 #It's already compressed
                    name: snap
                    path: ~/install/usr/*.snap

            -   name: Store NSIS
                if: env.BUILD_EMBER_NSIS == 'true'
                uses: actions/upload-artifact@v4.6.1
                with:
                    compression-level: 0 #It's already compressed
                    name: NSIS
                    path: ${{github.workspace}}/build/apps/ember/*.exe

            - name: Upload Windows executable to amber
              if: env.BUILD_EMBER_NSIS == 'true'
              working-directory: "${{github.workspace}}/build/apps/ember"
              shell: cmd
              run: rsync -uzcP --no-p *.exe ${{ secrets.RSYNC_USER }}@amber.worldforge.org::ember-unstable/

            -   name: Store AppImage
                if: env.BUILD_APPIMAGE == 'true'
                uses: actions/upload-artifact@v4.6.1
                with:
                    name: AppImage
                    path: Ember-x86_64.AppImage

